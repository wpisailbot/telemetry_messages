# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import control_pb2 as control__pb2


class ExecuteRudderCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteRudderCommand = channel.unary_unary(
                '/boat_control.ExecuteRudderCommandService/ExecuteRudderCommand',
                request_serializer=control__pb2.RudderCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteRudderCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteRudderCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteRudderCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteRudderCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteRudderCommand,
                    request_deserializer=control__pb2.RudderCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteRudderCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteRudderCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteRudderCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteRudderCommandService/ExecuteRudderCommand',
            control__pb2.RudderCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteTrimTabCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTrimTabCommand = channel.unary_unary(
                '/boat_control.ExecuteTrimTabCommandService/ExecuteTrimTabCommand',
                request_serializer=control__pb2.TrimTabCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteTrimTabCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteTrimTabCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteTrimTabCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTrimTabCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTrimTabCommand,
                    request_deserializer=control__pb2.TrimTabCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteTrimTabCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteTrimTabCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteTrimTabCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteTrimTabCommandService/ExecuteTrimTabCommand',
            control__pb2.TrimTabCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteBallastCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteBallastCommand = channel.unary_unary(
                '/boat_control.ExecuteBallastCommandService/ExecuteBallastCommand',
                request_serializer=control__pb2.BallastCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteBallastCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteBallastCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteBallastCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteBallastCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteBallastCommand,
                    request_deserializer=control__pb2.BallastCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteBallastCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteBallastCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteBallastCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteBallastCommandService/ExecuteBallastCommand',
            control__pb2.BallastCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteAutonomousModeCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteAutonomousModeCommand = channel.unary_unary(
                '/boat_control.ExecuteAutonomousModeCommandService/ExecuteAutonomousModeCommand',
                request_serializer=control__pb2.AutonomousModeCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteAutonomousModeCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteAutonomousModeCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteAutonomousModeCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteAutonomousModeCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAutonomousModeCommand,
                    request_deserializer=control__pb2.AutonomousModeCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteAutonomousModeCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteAutonomousModeCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteAutonomousModeCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteAutonomousModeCommandService/ExecuteAutonomousModeCommand',
            control__pb2.AutonomousModeCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteSetWaypointsCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteSetWaypointsCommand = channel.unary_unary(
                '/boat_control.ExecuteSetWaypointsCommandService/ExecuteSetWaypointsCommand',
                request_serializer=control__pb2.SetWaypointsCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteSetWaypointsCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteSetWaypointsCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteSetWaypointsCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteSetWaypointsCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSetWaypointsCommand,
                    request_deserializer=control__pb2.SetWaypointsCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteSetWaypointsCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteSetWaypointsCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteSetWaypointsCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteSetWaypointsCommandService/ExecuteSetWaypointsCommand',
            control__pb2.SetWaypointsCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteAddWaypointCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteAddWaypointCommand = channel.unary_unary(
                '/boat_control.ExecuteAddWaypointCommandService/ExecuteAddWaypointCommand',
                request_serializer=control__pb2.AddWaypointCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteAddWaypointCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteAddWaypointCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteAddWaypointCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteAddWaypointCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAddWaypointCommand,
                    request_deserializer=control__pb2.AddWaypointCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteAddWaypointCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteAddWaypointCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteAddWaypointCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteAddWaypointCommandService/ExecuteAddWaypointCommand',
            control__pb2.AddWaypointCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteMarkBuoyCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteMarkBuoyCommand = channel.unary_unary(
                '/boat_control.ExecuteMarkBuoyCommandService/ExecuteMarkBuoyCommand',
                request_serializer=control__pb2.MarkBuoyCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteMarkBuoyCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteMarkBuoyCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteMarkBuoyCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteMarkBuoyCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteMarkBuoyCommand,
                    request_deserializer=control__pb2.MarkBuoyCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteMarkBuoyCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteMarkBuoyCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteMarkBuoyCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteMarkBuoyCommandService/ExecuteMarkBuoyCommand',
            control__pb2.MarkBuoyCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteSetVFForwardMagnitudeCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteSetVFForwardMagnitudeCommand = channel.unary_unary(
                '/boat_control.ExecuteSetVFForwardMagnitudeCommandService/ExecuteSetVFForwardMagnitudeCommand',
                request_serializer=control__pb2.SetVFForwardMagnitudeCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteSetVFForwardMagnitudeCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteSetVFForwardMagnitudeCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteSetVFForwardMagnitudeCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteSetVFForwardMagnitudeCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSetVFForwardMagnitudeCommand,
                    request_deserializer=control__pb2.SetVFForwardMagnitudeCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteSetVFForwardMagnitudeCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteSetVFForwardMagnitudeCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteSetVFForwardMagnitudeCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteSetVFForwardMagnitudeCommandService/ExecuteSetVFForwardMagnitudeCommand',
            control__pb2.SetVFForwardMagnitudeCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExecuteSetRudderKPCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecureSetRudderKPCommand = channel.unary_unary(
                '/boat_control.ExecuteSetRudderKPCommandService/ExecureSetRudderKPCommand',
                request_serializer=control__pb2.SetRudderKPCommand.SerializeToString,
                response_deserializer=control__pb2.ControlResponse.FromString,
                )


class ExecuteSetRudderKPCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecureSetRudderKPCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecuteSetRudderKPCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecureSetRudderKPCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecureSetRudderKPCommand,
                    request_deserializer=control__pb2.SetRudderKPCommand.FromString,
                    response_serializer=control__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'boat_control.ExecuteSetRudderKPCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecuteSetRudderKPCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecureSetRudderKPCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/boat_control.ExecuteSetRudderKPCommandService/ExecureSetRudderKPCommand',
            control__pb2.SetRudderKPCommand.SerializeToString,
            control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
